name: CMake

on:
  pull_request:
  push:
    branches:
      - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

# Use a bash shell so we can use the same syntax for environment variable
# access regardless of the host operating system
defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-modules
        with:
          path: |
            ${{ env.CONAN_USER_HOME }}
            ~/.cache/pip
          key: ${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Conan.cmake') }}

      - name: Install conan
        run: |
          pip3 install wheel setuptools gcovr
          pip3 install conan --upgrade

      - name: Install / Configure dependencies
        shell: bash
        run: |
          echo "Ubuntu - Fix Conan Path"
          sudo update-alternatives --install /usr/bin/conan conan /home/runner/.local/bin/conan 10
          sudo update-alternatives --config conan
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Configure CMake
        run: |
          export CC=/usr/bin/gcc
          export CXX=/usr/bin/g++
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE:STRING=$BUILD_TYPE -DENABLE_COVERAGE:BOOL=ON

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build ./build --config $BUILD_TYPE

      - name: Test and coverage
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C $BUILD_TYPE
          gcovr -j $(nproc) --delete --root ../ --print-summary --xml-pretty --xml coverage.xml .

      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml

      - name: Archive Outputs on Failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: outputs
          path: build/CMakeFiles/CMakeOutput.log
